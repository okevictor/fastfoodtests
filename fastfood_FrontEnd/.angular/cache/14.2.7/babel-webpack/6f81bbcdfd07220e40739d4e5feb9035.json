{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CustomerServiceService = /*#__PURE__*/(() => {\n  class CustomerServiceService {\n    constructor(http) {\n      this.http = http;\n    }\n    /* Method:getABranchItems\n       * Type: GetMapping\n       * Description: Called from customer home page to view all the existing items in his location\n       * @param number: branchId\n       * @return Item[]: a List of all the existing items in the given branch\n       * @throws ResourceNotFoundException : It is raised when no data is found with the given request\n      */\n\n\n    getABranchItems(branchId) {\n      return this.http.get(\"http://localhost:8094/customer/getABranchItems/\" + branchId);\n    }\n    /* Method:searchItems\n       * Type: GetMapping\n       * Description: Called from home page to search for desired items or categories\n       * @param number: branchId\n       * @param String: searchText\n       * @return Item[]: a set of items related to the search text is returned\n      */\n\n\n    searchItems(branchId, searchText) {\n      return this.http.get(\"http://localhost:8094/customer/searchItems/\" + branchId + \"/\" + searchText);\n    }\n    /* Method:getABranchCategories\n       * Type: GetMapping\n       * Description: Called from customer home page to view all the existing categories of items in his location\n       * @param number: branchId\n       * @return Category[]: a List of all the existing categories of items in the given branch\n       * @throws ResourceNotFoundException : It is raised when no data is found with the given request\n      */\n\n\n    getABranchCategories(branchId) {\n      return this.http.get(\"http://localhost:8094/customer/getABranchSubCategories/\" + branchId);\n    }\n    /* Method: trackAnOrder\n       * Type: GetMapping\n       * Description: Called from customer account page to get the status of an order placed\n       * @param number: orderId\n       * @return Order[]: a list of Order object with that order Id from the user account\n       * @throws ResourceNotFoundException : It is raised when no data is found with the given request\n      */\n\n\n    trackAnOrder(orderId) {\n      return this.http.get(\"http://localhost:8094/customer/trackAnOrder/\" + orderId);\n    }\n    /* Method:getACarryBoxDetails\n       * Type: GetMapping\n       * Description: Called from customer carry box page to get a list of items present in one's carrybox and related info\n       * @param number: carryBoxId\n       * @return CarryBox: a object of a CarryBox of given Carry Box id\n      */\n\n\n    getCarryBoxDetails(emailId) {\n      return this.http.get(\"http://localhost:8094/customer/getACarryBoxDetails/\" + emailId);\n    }\n    /* Method:getMyOrders\n       * Type: GetMapping\n       * Description: Called from customer account page to get a list of orders placed\n       * @param String: emailId\n       * @return Order[]: a list of Order objects placed from the user account\n       * @throws ResourceNotFoundException : It is raised when no data is found with the given request\n      */\n\n\n    getMyOrders(emailId) {\n      return this.http.get(\"http://localhost:8094/customer/getAnUserOrders/\" + emailId);\n    }\n    /* Method:getMyAddresses\n       * Type: GetMapping\n       * Description: Called from customer account page and place order page to get a list of addresses saved\n       * @param String: emailId\n       * @return Address[]: a list of Address objects saved to a user account\n       * @throws ResourceNotFoundException : It is raised when no data is found with the given request\n      */\n\n\n    getMyAddresses(emailId) {\n      return this.http.get(\"http://localhost:8094/customer/getAnUserAddresses/\" + emailId);\n    }\n    /* Method:addAnItemToCarryBox\n       * Type: PostMapping\n       * Description: Called from items page to add a desired item to carry box before buying\n       * @param String:emailId\n       * @param number: itemId\n       * @return boolean: a boolean is returned to notify whether the item is added to carry box or not\n      */\n\n\n    addItemToCarryBox(emailId, itemId) {\n      return this.http.post(\"http://localhost:8094/customer/addAnItemToCarryBox/\" + emailId, itemId);\n    }\n    /* Method:addANewAddress\n       * Type: PostMapping\n       * Description: Called from customer account page and place order page to add a new address to the list of addresses saved\n       * @param Address: address\n       * @return boolean: a boolean is returned to notify whether the new address is added or not\n       * @throws ResourceNotFoundException : It is raised when no data is found with the given request\n      */\n\n\n    addANewAddress(emailId, address) {\n      return this.http.post(\"http://localhost:8094/customer/addANewAddress/\" + emailId, address);\n    }\n    /* Method:updateAnAddress\n        * Type: PutMapping\n        * Description: Called from customer account page to update an existing address in the list of addresses saved\n        * @param Address: address\n        * @return boolean: a boolean is returned to notify whether the new address is updated or not\n        * @throws ResourceNotFoundException : It is raised when no data is found with the given request\n       */\n\n\n    updateAnAddress(emailId, address) {\n      return this.http.put(\"http://localhost:8094/customer/updateAnAddress/\" + emailId, address);\n    }\n    /* Method:placeOrder\n       * Type: PostMapping\n       * Description: Called from customer placeOrder page to place a new order\n       * @param String: emailId\n       * @param number:branchId\n       * @param number:addressId\n       * @return number: orderId is returned\n      */\n\n\n    placeOrder(emailId, branchId, addressId) {\n      return this.http.post(\"http://localhost:8094/customer/placeANewOrder/\" + emailId + \"/\" + branchId + \"/\" + addressId, \"\");\n    }\n    /* Method:updateItemInCarryBox\n       * Type: PutMapping\n       * Description: Called from Carry Box page to update the quantity of an item in carry box\n       * @param String:emailId\n       * @param number: itemId\n       * @param number: quantity\n       * @return boolean: a boolean is returned to notify whether an item in the carry box is updated or not\n      */\n\n\n    updateItemInCarryBox(emailId, itemId, quantity) {\n      return this.http.put(\"http://localhost:8094/customer/updateACarryBoxItem/\" + emailId + \"/\" + itemId, quantity);\n    }\n    /* Method:deleteACarryBoxItem\n       * Type: DeleteMapping\n       * Description: Called from Carry Box page to delete a item from carry box when not needed\n       * @param String:emailId\n       * @param number: itemId\n       * @return boolean: a boolean is returned to notify whether the item is deleted from carry box or not\n      */\n\n\n    deleteACarryBoxItem(emailId, itemId) {\n      return this.http.delete(\"http://localhost:8094/customer/deleteACarryBoxItem/\" + emailId + \"/\" + itemId);\n    }\n    /* Method:deleteAnAddress\n        * Type: DeleteMapping\n        * Description: Called from my aacount page to delete a saved address\n        * @param number:addressId\n        * @return boolean: a boolean is returned to notify whether the items are deleted from carry box or not\n       */\n\n\n    deleteAnAddress(addressId) {\n      return this.http.delete(\"http://localhost:8094/customer/deleteAnAddress/\" + addressId);\n    }\n    /* Method:clearCarryBox\n       * Type: DeleteMapping\n       * Description: Called from Carry Box page to delete all the items in carry box when not needed\n       * @param string:emailId\n       * @return boolean: a boolean is returned to notify whether the items are deleted from carry box or not\n      */\n\n\n    clearTheCarryBox(emailId) {\n      return this.http.delete(\"http://localhost:8094/customer/clearACarryBox/\" + emailId);\n    }\n    /* Method:getABranchCategoryList\n       * Type: GetMapping\n       * Description: Called from my account page, items page to get the list of categoreis in a branch\n       * @param number:branchId\n       * @return Category[]: a list of category objects will be returned\n    */\n\n\n    getABranchCategoryList(branchId) {\n      return this.http.get(\"http://localhost:8094/customer/getABranchCategories/\" + branchId);\n    }\n    /* Method:getAnUserDetails\n       * Type: GetMapping\n       * Description: Called from my account page to get the details of an user\n       * @param string:emailId\n       * @return User: a user object will be retuned\n      */\n\n\n    getAnUserDetails(emailId) {\n      return this.http.get(\"http://localhost:8094/customer/getAnUserDetails/\" + emailId);\n    }\n    /* Method:getAllBranches\n       * Type: GetMapping\n       * Description: Called from home page to get the list of existing branches\n       * @return List<BranchDto>: a list of BranchDto objects will be retuned\n      */\n\n\n    getAllBranches() {\n      return this.http.get(\"http://localhost:8094/customer/getAllBranches\");\n    }\n\n  }\n\n  CustomerServiceService.ɵfac = function CustomerServiceService_Factory(t) {\n    return new (t || CustomerServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CustomerServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomerServiceService,\n    factory: CustomerServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return CustomerServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}